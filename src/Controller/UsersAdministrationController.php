<?php
namespace App\Controller;

use App\Controller\AppController;

/**
 * UsersAdministration Controller
 *
 */
class UsersAdministrationController extends AppController
{

    private $Userstable = null;
    public function isAuthorized($user)
    {
        if (isset($user['role']) and $user['role'] === 'user') {
            if (in_array($this->request->getParam('action'), ['uploadFiles'])) {
                return true;
            }
        } else if (isset($user['role']) and $user['role'] === 'supervisor') {
            if (in_array($this->request->getParam('action'), ['uploadFiles', 'index', 'add', 'edit', 'resetPassword', 'delete'])) {
                return true;
            }
        }


        return parent::isAuthorized($user);
    }

    public function initialize()
    {

        $this->Userstable = $this->loadModel('Users');
        parent::initialize(); // TODO: Change the autogenerated stub
    }


    public function index()
    {
        $session = $this->request->getSession();
        $user_role = $session->read('Auth.User.role');
        $id_empresa = $session->read('Auth.User.empresas_idempresas');

        $users = null;

        if($user_role == 'admin'){
            $users =  $this->Userstable->find('all', [
                'contain' => ['Empresas']
            ])->where(['idusers !=' => $this->Auth->user()['idusers']]);

        } else {

            $users =  $this->Userstable->find('all', [
                'contain' => ['Empresas']
            ])->where(['idusers !=' => $this->Auth->user()['idusers'], 'empresas_idempresas' => $id_empresa]);
        }


        $this->set(compact('users'));

    }

    public function add()
    {

        $user = $this->Userstable->newEntity();

        //SI el usuario es admin consulto las empresas, sino traigo el valor de la empresa

        $session = $this->request->getSession();
        $user_role = $session->read('Auth.User.role');
        $this->set(compact('user_role'));

        $id_empresa = $session->read('Auth.User.empresas_idempresas');

        if($user_role == 'admin'){
            //Traigo las empresas como array
            $empresasTable = $this->loadModel('Empresas');
            $empresas = $empresasTable->find('list', [
                'keyField' => 'idempresas',
                'valueField' => 'name'
            ])->toArray();

            $this->set(compact('empresas'));
        }

        //Tengo que armar los perfiles de Usuarios
        $type_users = [
            'supervisor' => 'supervisor',
            'user' => 'user'
        ];

        $this->set(compact('type_users'));


        if ($this->request->is('post')) {

            $user = $this->Userstable->patchEntity($user, $this->request->getData());

            //verifico si el ingreso fue por admin o por supervisor
            if($user_role == 'supervisor'){
                $user->empresas_idempresas = $id_empresa;
            }

            if ($this->Userstable->save($user)) {

                $this->Flash->success(__('El usuario ha sido almacenado correctamente'));

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('Error al almacenar el usuario'));

            }
            //$this->Flash->error(__('Error al almacenar el usuario'));

        }
        $this->set(compact('user'));

    }


    public function edit($id = null)
    {
        $user = $this->Userstable->get($id);

        //SI el usuario es admin consulto las empresas, sino traigo el valor de la empresa

        $session = $this->request->getSession();
        $user_role = $session->read('Auth.User.role');
        $this->set(compact('user_role'));

        $id_empresa = $session->read('Auth.User.empresas_idempresas');

        if($user_role == 'admin'){
            //Traigo las empresas como array
            $empresasTable = $this->loadModel('Empresas');
            $empresas = $empresasTable->find('list', [
                'keyField' => 'idempresas',
                'valueField' => 'name'
            ])->toArray();

            $this->set(compact('empresas'));
        }

        $type_users = [
            'supervisor' => 'supervisor',
            'user' => 'user'
        ];
        $this->set(compact('type_users'));



        if ($this->request->is(['patch', 'post', 'put'])) {

            $user = $this->Userstable->patchEntity($user, $this->request->getData());

            if ($this->Userstable->save($user)) {

                $session->write('Auth.User', $user);

                $this->Flash->success(__('El usuario ha sido actualizado correctamente'));

                return $this->redirect(['action' => 'index']);

            } else {
                $this->Flash->error(__('Error al almacenar el usuario'));

            }
            debug($this->Userstable->erros());
            //$this->Flash->error(__('Error al almacenar el usuario'));

        }
        $this->set(compact('user'));

    }

    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Userstable->get($id);

        try{

            //Primero elimino la imagen si es que tiene
            $var_aux = false;
            if($user->photo != '')
            {
                $filesManager = new FilesManagerController();
                //ELimino el archivo
                if($filesManager->deleteFile($user->photo, PROFILE)){
                    $var_aux = true;
                }

            } else {
                $var_aux = true;
            }

            if(!$var_aux){
                $this->Flash->error(__('El Usuario no pudo ser eliminado. Intente nuevamente.'));
            } else {
                if ($this->Userstable->delete($user)) {
                    $this->Flash->success(__('El Registro ha sido eliminado.'));

                    return $this->redirect(['action' => 'index']);
                } else {
                    $this->Flash->error(__('El Usuario no pudo ser eliminado. Intente nuevamente.'));
                }
            }

        }catch(\PDOException $e){
            $this->Flash->error(__($e->getMessage()));
            $this->Flash->error(__('El Usuario no pudo ser eliminado. Intente nuevamente.'));
        }
    }

    public function resetPassword($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Userstable->get($id);

        $new_password = '123456';
        $user->password = $new_password;

        if ($this->Userstable->save($user)) {

            $this->Flash->success(__('ContraseÃ±a Reseteada correctamente'));

            return $this->redirect(['action' => 'index']);

        } else {
            $this->Flash->error(__('Error. Intenta nuevamente'));

        }

    }


}
