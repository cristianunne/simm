<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Core\Configure;
use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Event\Event;
use Cake\Http\Exception\ForbiddenException;
use Cake\Http\Exception\NotFoundException;
use Cake\Http\Response;
use Cake\View\Exception\MissingTemplateException;

/**
 * Static content controller
 *
 * This controller will render views from Template/Pages/
 *
 * @link https://book.cakephp.org/3/en/controllers/pages-controller.html
 */
class PagesController extends AppController
{
    /**
     * Displays a view
     *
     * @param array ...$path Path segments.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Http\Exception\ForbiddenException When a directory traversal attempt.
     * @throws \Cake\Http\Exception\NotFoundException When the view file could not
     *   be found
     * @throws \Cake\View\Exception\MissingTemplateException In debug mode.
     */

    private $Userstable = null;
    private $Empresastable = null;

    public function beforeFilter(Event $event)
    {
        //debo controllar que exista
        try {

            $session = $this->request->getSession();
            $user_id = $session->read('Auth.User.idusers');

            $model_user = $this->loadModel('Users');

            //Recupero los datos de la URL
            $user = $model_user->get($user_id, [
                'contain' => []
            ]);

            //Actualizo el usuario
            $session->write('Auth.User.firtsname', $user->firstname);
            $session->write('Auth.User.lastname', $user->lastname);
            $session->write('Auth.User.photo', $user->photo);
            $session->write('Auth.User.folder', $user->folder);

            $this->set('current_user', $user);

        } catch (InvalidPrimaryKeyException $e)
        {
            return parent::beforeFilter($event);

        }

    }

    public function initialize()
    {

        $this->Userstable = $this->loadModel('Users');
        $this->Empresastable = $this->loadModel('Empresas');
        parent::initialize(); // TODO: Change the autogenerated stub
    }


    public function isAuthorized($user)
    {
        if (isset($user['role']) and $user['role'] === 'user') {
            if (in_array($this->request->getParam('action'), ['index', 'indexUser'])) {
                return true;
            }
        } else if (isset($user['role']) and $user['role'] === 'supervisor') {
            if (in_array($this->request->getParam('action'), ['index', 'indexUser'])) {
                return true;
            }
        }
        return parent::isAuthorized($user);
    }


    public function index()
    {
        $session = $this->request->getSession();
        $id_empresa = $session->read('Auth.User.empresas_idempresas');
        $user_role = $session->read('Auth.User.role');


        if($user_role == 'admin')
        {



            return $this->redirect(['controller' => 'Pages', 'action' => 'indexAdmin']);

        } else {
            //deberia retornar con el get
            //Consulto si la empresa esta activa, sino la llevo a otro lado
            $empresa = $this->Empresastable->get($id_empresa, []);

            if($empresa->active){
                return $this->redirect(['controller' => 'Pages', 'action' => 'indexUser']);


            } else {
                $this->Flash->error(__('La Empresa no tiene prestaciÃ³n actualmente. Contacte al Administrador del Sitio.'));
                //return $this->redirect(['controller' => 'Users', 'action' => 'logout']);
            }
        }

    }

    public function indexAdmin()
    {
        $session = $this->request->getSession();
        //Seteo la session id empresa a null
        $session->write('Auth.User.Empresa.idempresas', null);
        $id_empresa = $session->read('Auth.User.Empresa.idempresas');

    }

    public function indexUser($id = null)
    {

        $session = $this->request->getSession();
        $user_role = $session->read('Auth.User.role');
        $id_empresa = $session->read('Auth.User.empresas_idempresas');
        $this->set(compact('user_role'));

        //Variable usada para el sidebar
        $seccion = 'inicio';
        $sub_seccion = null;



        try{
            //Consulto si no es el administrador el que esta ingresando
            if($user_role == 'admin')
            {
                $id_empresa = $id;
                $seccion = 'inicio_emp';
            }
            //Traigo los datos de la empresa
            //Consulto si la empresa esta activa, sino la llevo a otro lado
            $empresa = $this->Empresastable->get($id_empresa, []);

            $this->set(compact('seccion'));
            $this->set(compact('sub_seccion'));

            $session->write('Auth.User.Empresa', $empresa);

        } catch (InvalidPrimaryKeyException $e){

            $this->Flash->error(__('Acceso no Autorizado.'));
            //SI Hay error me quedo aca pero muestro algun mensaje

            //return $this->redirect(['controller' => 'Pages', 'action' => 'index']);
        }


    }


}
